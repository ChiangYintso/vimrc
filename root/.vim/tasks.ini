[file-build]
command:c=gcc -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:cpp=g++ -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:go=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python3 "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:markdown=npx @marp-team/marp-cli@latest "$(VIM_FILENAME)" -w --html
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[project-build]
command:c,cpp=make
# set the working directory to the project root.
cwd:c,cpp=$(VIM_ROOT)

[project-run]
command:c,cpp=make run
# <root> is an alias to `$(VIM_ROOT)`, a little easier to type.
cwd:c,cpp=<root>
output:c,cpp=terminal

[ctags]
command:c,cpp=ctags -R --exclude=build --exclude=third_party --exclude=doc *

[cscope]
command:cpp=find . -name '*.cc' -or -name '*.h' > cscope.files && cscope -Rbq

[gtags]
command=gtags

[pytest]
command=python3 -m pytest -q --tb=no
output=terminal
