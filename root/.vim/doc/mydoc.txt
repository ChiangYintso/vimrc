*mydoc.txt*

                                My Documents~

===============================================================================

*netrw*
选中打开/折叠文件夹	鼠标左键
新建文件夹		d
在当前文件夹下新建文件	%
删除文件/文件夹 D
-------------------------------------------------------------------------------
*保存会话session*	:mks foo.vim
*加载会话session*	vim -S foo.vim
-------------------------------------------------------------------------------

*往下/上翻1页*		CTRL-F CTRL-B
*往下/上翻半页*		CTRL-D CTRL-U

*Vim自带插入补全*	Insert mode completion			|ins-completion|

*Neovim和vim使用同样的插件*	.config/nvim/init.vim中`let g:nvim_compatibility_with_vim = 1`
*fold*

https://vim.fandom.com/wiki/Folding
*折叠右花括号*	`zfa}`	`va}zf`

*auto-completion* https://zhuanlan.zhihu.com/p/106309524
*cheetsheets* https://devhints.io/vim-help
*重复执行上一个命令* @:

*命令（command）模式下cursor移动到开头*	CTRL-B
*命令（command）模式下cursor移动到结尾*	CTRL-E

*goto-file* gf gF CTRL-Vgf CTRL-VgF
*increment-number* CTRL-A
*paste-in-(search-)command-mode* CTRL-R"
*next-in-search-mode* *查找模式下的n和N* CTRL-G CTRL-T
*put-vim-progress-to-the-background* CTRL-Z, see linux tool `fg`, `bg`.
*select-history-command* `q:`

*搜索并替换整个文件中的第一个模式* `:/pattern/s//replace/`
解释：
:/pattern/s: 在满足pattern的第一行的范围下，执行:s command
//: 搜索模式为空时，默认使用上一个模式
/replace/: 替换模式
See: https://vi.stackexchange.com/questions/7194/how-to-substitute-the-first-occurrence-across-the-whole-file

*macro*
Each register is identified by a letter a to z or number 0-9 or ".
recording a macro: >
  qd	start recording to register d
  ...	your complex series of commands
  q	stop recording
  @d	execute register d (your macro)
  @@	execute your macro again
<

*terminal-window-executes-shortcuts* CTRL-W{shortcuts}
*yank-terminal* CTRL-WN

*split-window-with-height-10-and-open-buffer-1* `:10sp #1`

*add-to-the-end-of-line* `:%s/$/ galaxy/g`
*add-to-the-begin-of-line* `:%s/^/hello /g`
*put-grep-results-into-quickfixlist-then-execute-by-cdo* `:cdo %s/<search term>/<replace term>/cg`

*filter-quickfix* >
  :packadd cfilter
  :vimgrep /foo/
  :Cfilter /runtime/
<

-------------------------------------------------------------------------------

*find-files* (vim will be blocked if directory is too large) >
  set path+=**
  :find <file>
<

`:Fd` see .vimrc

*marks*
mark: `ma`
jump: `'a`

*format*
*clang-format* `:%!clang-format` or `:'<,'>!clang-format`.
No need of `Plug 'rhysd/vim-clang-format'`

*lint*
*clang-tidy* 
output to quickfix list: >
  :CExprsys clang-tidy hello.cpp
<

-------------------------------------------------------------------------------
*markdown*

Markdown等文本编辑添加链接：
1) fd > path.txt  预处理得到项目所有文件路径
2）:Path模糊查找文件路径并插入到当前光标位置

查找Hashtag并插入到当前光标位置		:Hashtag

*marp* Markdown Presentation Ecosystem

See: https://github.com/marp-team/marp-cli

watch mode >
  npx @marp-team/marp-cli@latest note.md -w --html
<

md -> html >
  :AsyncRun npx @marp-team/marp-cli@latest note.md
<

md enable inlining html >
  :AsyncRun npx @marp-team/marp-cli@latest note.md --html
<

md -> pptx >
   npx @marp-team/marp-cli@latest llvm-udo.md --pptx --allow-local-files --html
<

-------------------------------------------------------------------------------
*lsp* *coc.nvim*
TODO: LSP formatter, LSP linter


-------------------------------------------------------------------------------
*fzf.vim*

*paste-to-fzf-popup-window*

"+y           yank to system
CTRL-SHIFT-V  paste

-------------------------------------------------------------------------------

*mydoc-vim-visual-multi*

*vim-visual-multi选中words创建cursor*	CTRL-N
*vim-visual-multi通过Up/Down创建cursor*	CTRL-Down CTRL-Up
*vim-visual-multi创建cursor*		\\\
-------------------------------------------------------------------------------

*打开所有折叠*		zR

-------------------------------------------------------------------------------

*bash-help*

*start*					WSL用windows打开文件
*WSL创建软链接文件夹*			mklinkd 2023-03-07-1  /mnt/d/doc2/group-meeting/readinggroup/2023-03-07-1

*z* 模糊跳转autojump

*vimt* tex
*vimhelp* help
*vimdf* diff, see vimdf -h

-------------------------------------------------------------------------------

*bash-fzf*

*fzf快捷键*
*fzf跳转* 	fzfcd ALT-C
*fzf补全*	CTRL-T：递归搜索当前文件夹下文件
		CTRL-R：历史命令

*fzf查找文件夹并跳转* cd ** <TAB> 	
*rfv*		ripgrep grep找文件，fzf模糊查找，最后vim打开文件
*rffv*		ripgrep搜索文件，fzf模糊查找，最后vim打开文件
*rga* *rgi*	ripgrep查找各种类型的文件
*rga-fzf*	ripgrep查找各种类型的文件（不支持pptx），fzf模糊查找，最后打开文件
*rgi-fzf*	ripgrep查找各种类型的文件（支持pptx），fzf模糊查找，最后打开文件

-------------------------------------------------------------------------------

*junegunn/fzf-git.sh*	https://github.com/junegunn/fzf-git.sh/

CTRL-G CTRL-F for Files
CTRL-G CTRL-B for Branches
CTRL-G CTRL-T for Tags
CTRL-G CTRL-R for Remotes
CTRL-G CTRL-H for commit Hashes
CTRL-G CTRL-S for Stashes
CTRL-G CTRL-E for Each ref (git for-each-ref)

-------------------------------------------------------------------------------

https://stackoverflow.com/questions/39973214/how-to-display-the-hex-value-in-the-watch-panel-of-vs-code
*vimspector以十六进制方式查看expression*	<expr>,h

-------------------------------------------------------------------------------
*debug*

vimspector中调试多线程C++程序。

直接执行gdb命令: -exec command

For the C++ (GDB/LLDB) debugging environment, you can execute GDB, LLDB and LLDB-MI commands directly through the debug console with the -exec command, but be careful, executing commands directly in the debug console is untested and might crash VS Code in some cases.

*gdb*

step -> step in
next -> step over
finish -> step out
continue -> continue

gdb多线程调试：
一旦中断，所有线程都会被暂停。
set scheduler-locking on 只有当前线程可以执行
set scheduler-locking off 所有线程都可以执行，默认值
set scheduler-locking step 使用step/next这些单步命令时，只有当前线程可以执行；使用finish/continue命令时，所有线程都可以执行
thread <ID> 切换到ID线程
info threads 查看所有线程
thread apply all <command> 对所有线程执行command
thread apply <ID> <command> 对ID线程执行command

gdb查看栈: bt 数字
gdb切换某个栈: f[rame] 数字

-------------------------------------------------------------------------------
*Visual模式选中后，在外围添加大括号* <c-s>{
