*mydoc.txt*

                                My Documents~

===============================================================================

*auto-completion* https://zhuanlan.zhihu.com/p/106309524
*cheetsheets* https://devhints.io/vim-help
*重复执行上一个命令* @:
*goto-file* gf gF CTRL-Vgf CTRL-VgF
*increment-number* CTRL-A
*paste-in-(search-)command-mode* CTRL-R"
*next-in-search-mode* *查找模式下的n和N* CTRL-G CTRL-T
*put-vim-progress-to-the-background* CTRL-Z, see linux tool `fg`, `bg`.
*select-history-command* `q:`

*搜索并替换整个文件中的第一个模式* `:/pattern/s//replace/`
解释：
:/pattern/s: 在满足pattern的第一行的范围下，执行:s command
//: 搜索模式为空时，默认使用上一个模式
/replace/: 替换模式
See: https://vi.stackexchange.com/questions/7194/how-to-substitute-the-first-occurrence-across-the-whole-file

*macro*
Each register is identified by a letter a to z or number 0-9 or ".
recording a macro: >
  qd	start recording to register d
  ...	your complex series of commands
  q	stop recording
  @d	execute register d (your macro)
  @@	execute your macro again
<

*terminal-window-executes-shortcuts* CTRL-W{shortcuts}
*yank-terminal* CTRL-WN

*split-window-with-height-10-and-open-buffer-1* `:10sp #1`

*add-to-the-end-of-line* `:%s/$/ galaxy/g`
*add-to-the-begin-of-line* `:%s/^/hello /g`
*put-grep-results-into-quickfixlist-then-execute-by-cdo* `:cdo %s/<search term>/<replace term>/cg`

*filter-quickfix* >
  :packadd cfilter
  :vimgrep /foo/
  :Cfilter /runtime/
<

-------------------------------------------------------------------------------

*find-files* (vim will be blocked if directory is too large) >
  set path+=**
  :find <file>
<

`:Fd` see .vimrc

*marks*
mark: `ma`
jump: `'a`

*tags*
See .vimrc
Comparison with ctags, gtags and cscope:
  https://github.com/oracle/opengrok/wiki/Comparison-with-Similar-Tools

gtags(global) > cscope > ctags

Universal Ctags: a maintained implementation of ctags
Exuberant Ctags: unmaintained

Install on Ubuntu: >
  sudo apt install global
  sudo apt install cscpoe
  sudo apt install universal-ctags
  # sudo apt insatll exuberant-ctags
<

*format*
*clang-format* `:%!clang-format` or `:'<,'>!clang-format`.
No need of `Plug 'rhysd/vim-clang-format'`

*lint*
*clang-tidy* 
output to quickfix list: >
  :CExprsys clang-tidy hello.cpp
<

-------------------------------------------------------------------------------
*markdown*

*marp* Markdown Presentation Ecosystem

See: https://github.com/marp-team/marp-cli

watch mode >
  npx @marp-team/marp-cli@latest note.md -w --html
<

md -> html >
  :AsyncRun npx @marp-team/marp-cli@latest note.md
<

md enable inlining html >
  :AsyncRun npx @marp-team/marp-cli@latest note.md --html
<

md -> pptx >
   npx @marp-team/marp-cli@latest llvm-udo.md --pptx --allow-local-files --html
<

-------------------------------------------------------------------------------
*lsp* *coc.nvim*
TODO: LSP formatter, LSP linter


-------------------------------------------------------------------------------
*fzf.vim*

*paste-to-fzf-popup-window*

"+y           yank to system
CTRL-SHIFT-V  paste

-------------------------------------------------------------------------------

*WSL创建软链接文件夹*			mklinkd 2023-03-07-1  /mnt/d/doc2/group-meeting/readinggroup/2023-03-07-1


*git提交把作者改成自己*				git commit --amend --reset-author --no-edit
*ssh生成key*					1) ssh-keygen -t rsa -C '邮件地址@youremail.com'	2) cat ~/.ssh/id_rsa.pub
*git回退版本*					git reset --soft 需要回退的commit hash
*git先暂存自己的修改，再pull别人的提交*		1) git stash 	2) git pull 	3) git pop
*git复制某一分支*				git remote set-url
*git合并commit* 					git reset

-------------------------------------------------------------------------------

*git-diff/merge*

*git-difftool*					git difftool HEAD mydoc.txt` or `git difftool -- mydoc.txt HEAD

*git-mergetool*

tutorial: https://gist.github.com/karenyyng/f19ff75c60f18b4b8149

clean-LOCAL-BASE-REMOTE-files			git clean -i

-------------------------------------------------------------------------------

*git-checkout*

*撤销某一个文件的修改*			git checkout -- 文件名
git checkout 可以checkout部分文件到某一次提交/分支。可以用于回滚部分文件。

*git-checkout历史文件*			git checkout v0.2.2 -- markdown.vim

-------------------------------------------------------------------------------

*Git在单体仓库中pull部分文件*

*monorepo*

以clone [etcd/raft](https://github.com/etcd-io/etcd/tree/main/raft)为例

1) *partial-clone* >
  git clone --no-checkout https://hub.fastgit.org/etcd-io/etcd.git etcd_raft3 --depth=1 --filter=blob:none or git clone --no-checkout https://hub.fastgit.org/etcd-io/etcd.git etcd_raft3 --depth=1 --filter=tree:0
<

blob代表文件，tree代表文件夹。后者文件大小似乎略小一点。

2) *sparse-checkout* >
  cd etcd_raft3 git sparse-checkout init git sparse-checkout set '!/*/' '/raft/' git checkout main
<

当git版本>=2.32.0时，可以添加在`git sparse-checkout init`中添加`--sparse-index`选项进一步减小git文件大小，见 [https://git-scm.com/docs/git-sparse-checkout/2.32.0](https://git-scm.com/docs/git-sparse-checkout/2.32.0)

最后只有raft目录在项目文件夹中。 `git sparse-checkout list` 可以查看当前sparse-checkout的规则。

其它参考资料： [https://github.blog/tag/monorepo/](https://github.blog/tag/monorepo/) [https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/](https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/) [https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/](https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/)

-------------------------------------------------------------------------------

*藏匿当前正在修改，但尚未commit的工作区。适合临时保存、切换工作区（比如临时hotfix）*		git stash

-------------------------------------------------------------------------------

*mydoc-vim-visual-multi*

*vim-visual-multi选中words创建cursor*	CTRL-N
*vim-visual-multi通过Up/Down创建cursor*	CTRL-Down CTRL-Up
*vim-visual-multi创建cursor*		\\\
-------------------------------------------------------------------------------

*打开所有折叠*		zR
