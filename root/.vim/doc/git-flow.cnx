*git-flow*
*git-branch-model*

|git|
See: $DOC2/cs/tools-open-source/git-github/git-branch-model

多人协作时，需要将本地master单分支开发模式切换为master-dev-feature... 多分支开发模式。
切换步骤如下:

在master分支中 >
  git branch dev
<

之后把master分支强行reset为远程master分支 >
  git reset --hard origin/master
<

创建新的dev分支，然后切换到dev分支中 >
  git checkout dev
<

在dev分支中，重新整理提交记录 >
  git reset <commit_hash>
<

*git-add-patch*
*git细粒度提交*
如果需要细粒度地提交，可以使用`git add -p <file>`。
git add -p会把文件的修改分成若干个更改块(hunks)，每个片段都可以选择是否提交。

如果需要临时切换到master分支，同时保留dev分支的修改，可以使用`git stash`。
*git-stash* 之后切回dev分支，使用`git stash pop`恢复修改。

可以在dev分支用`git merge master`，随时同主分支同步。

-------------------------------------------------------------------------------
*git-worktree* 多分支同时开发

好处:
1. 依赖隔离：`node_modules`被写入.gitignore中，假如多分支依赖的`node_modules`
不同，`git stash`不会改变`node_modules`

列举worktree >
	git worktree list
<

应用场景: 本地服务器+远程无法访问github的服务器同时修改提交 ~

在gpudb-project-ictdb中，
git worktree add -b kiwi-dev ../gpudb-project-ictdb-kiwi-dev
之后本地都在gpudb-project-ictdb文件夹下开发，远程在gpudb-project-ictdb-kiwi-dev
文件夹下开发，rsync仅在gpudb-project-ictdb-kiwi-dev下拉取/推送文件

