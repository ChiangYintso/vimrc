vim:ft=help
*docker*

-------------------------------------------------------------------------------
Docker磁盘空间清理 ~

https://blog.csdn.net/MinggeQingchun/article/details/125006782

无用的镜像和容器太多 ~

docker system df -v 查看单个image镜像、container容器空间占用细节，以确定是哪个镜像、容器或本地卷占用过高空间
docker system prune 命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像）
docker system prune -a 命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉

迁移/var/lib/docker目录 ~

https://cloud.tencent.com/developer/article/2020334
>bash
    systemctl stop docker
    mkdir -p /usr3/docker_data
    rsync -avzP /var/lib/docker /usr3/docker_data
<

修改/lib/systemd/system/docker.service文件：

在ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock后添加--data-root=/usr3/docker_data/docker

`--data-root string                        Root directory of persistent Docker state (default "/var/lib/docker")`

重启docker
>bash
    systemctl daemon-reload
    systemctl restart docker
<
删除原目录
>bash
    rm -rf /var/lib/docker
<

-------------------------------------------------------------------------------
*nvidia-docker*

nvidia-docker 被achieved了，使用 *nvidia-container-toolkit*
- https://github.com/NVIDIA/nvidia-docker
- https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
- https://www.howtogeek.com/devops/how-to-use-an-nvidia-gpu-with-docker-containers/


https://hub.docker.com/r/nvidia/cuda

nvidia-docker使用nvidia-smi，需要容器能访问GPU
>
	docker run --gpus all -it nvidia/cuda:11.0-base nvidia-smi
<

-------------------------------------------------------------------------------

Ubuntu 18.04安装 docker
https://roychou121.github.io/2020/07/13/ubuntu-install-docker/

>
	# 添加docker GPG key
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

	# 添加docker源
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	
	sudo apt-get update
	sudo apt-get install docker-ce docker-ce-cli containerd.io

	# Nvidia docker
	distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
	curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
	curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

	sudo apt-get update
	sudo apt-get install nvidia-container-toolkit

	sudo systemctl restart docker

	# 执行docker不加sudo
	sudo groupadd docker
	sudo gpasswd -a ${USER} docker
	sudo service docker restart
<

-------------------------------------------------------------------------------
*docker国内镜像*

/etc/docker/daemon.json
>
	{
		"registry-mirrors": [
			"https://<阿里云镜像url>.mirror.aliyuncs.com",
			"https://registry.docker-cn.com",
			"https://docker.mirrors.ustc.edu.cn/"
		]
	}
<
阿里云容器镜像服务 ACR
也可以先docker login --username=xxx registry.cn-hangzhou.aliyuncs.com


重启docker
>
	sudo systemctl restart docker
	systemctl restart docker.service
<
验证配置`docker info`

*docker设置http代理*

https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy

Docker pull ~

Docker pull命令由systemd控制。所以要在`/etc/systemd/system/docker.service.d/http-proxy.conf`
文件中添加
>
	[Service]
	Environment="HTTP_PROXY=http://proxy.example.com:3128"
	Environment="HTTPS_PROXY=https://proxy.example.com:3129"
	Environment="NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp"
<
kiwi机器示例
>
	[Service]
	Environment="HTTP_PROXY=http://localhost:3128"
	Environment="HTTPS_PROXY=http://localhost:3128"
<
然后重启Docker
>
	sudo systemctl daemon-reload
	sudo systemctl restart docker
<

验证配置
>
	docker info
<
或者
>
	sudo systemctl show --property=Environment docker
	Environment=HTTP_PROXY=http://proxy.example.com:3128 HTTPS_PROXY=https://proxy.example.com:3129 NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp
<

See:
https://www.lfhacks.com/tech/pull-docker-images-behind-proxy/
https://docs.docker.com/config/daemon/systemd/#httphttps-proxy

如果在`docker pull ubuntu`期间报错
>
	Error response from daemon: manifest for hub-mirror.c.163.com/ubuntu:latest not found: manifest unknown: manifest unknown
<

说明proxy不支持https
modify your HTTPS_PROXY=https://****:port with HTTPS_PROXY=http://****:port instead.

Ref:
https://copyprogramming.com/howto/error-response-from-daemon-get-http-s-registry-1-docker-io-v2-proxyconnect-tcp-tls-first-record-does-not-look-like-a-tls-handshake

Docker build 过程中 apt-get update ~

添加build arg，但proxy不能是localhost，必须写成宿主机内网IP(10.208.130.1)
似乎不需要添加/etc/apt/apt.conf.d/proxy.conf
>
	docker build \
	--build-arg "HTTP_PROXY=http://proxy.example.com:8080/" \
	--build-arg "HTTPS_PROXY=http://proxy.example.com:8080/" \
	--network host # 可能需要
<
-------------------------------------------------------------------------------
Docker run 示例 ~

开发OpenGauss使用的创建容器命令
>bash
	docker run -it --name jyz-openeuler --network=host --privileged -e http_proxy=http://localhost:3128 -e https_proxy=http://localhost:3128 -e LANG=$LANG -e LC_ALL=$LC_ALL -v /usr3/jiangyinzuo_data:/data openeuler/openeuler:22.03
bash
	docker run -it --name jyz-centos7.6 --network=host --privileged -e http_proxy=http://localhost:3128 -e https_proxy=http://localhost:3128 -e LANG=$LANG -e LC_ALL=$LC_ALL -v /usr3/jiangyinzuo_data:/data centos:centos7.6.1810 bash
<

starrocks: https://docs.starrocks.io/zh/docs/developers/build-starrocks/Build_in_docker/
>bash
	docker run -it -v /usr3/jiangyinzuo_data/:/data --network=host --privileged -e http_proxy=http://localhost:3128 -e https_proxy=http://localhost:3128 -e TERM=$TERM -e LANG=C.UTF-8 -e LC_ALL=$LC_ALL --name  jyz-starrocks -d 93aa59ce2c45
<

LANG/LC_ALL变量：解决中文乱码，见 https://blog.csdn.net/listen_wq/article/details/117737035

继承宿主机的TERM=xterm-256color
>bash
    docker exec -it -e TERM=$TERM jyz-starrocks bash
<
