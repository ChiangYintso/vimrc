*code-search* *novimrc* *noplugged*

打开历史文件 ~
|:oldfiles| 查看oldfiles
|c_#<|
`:command #<n`用:command打开第n个历史文件, 例如
>
	:e #<3
<
打开第3个历史文件

查找文本 ~
:vim /func main/ **/*.txt
:grep def foo.py
:grep 'def foo' foo.py
全字匹配
:grep -w def foo.py

使用grep ~
`grep 'func main' -r --exclude tags .`
`grep 'func main' ~/hello.go` 查找~/hello.go文件中的func main
`grep -i` 忽略大小写
`grep -w` 全字匹配

使用ripgrep ~
可以添加.rgignore/.ignore文件, 用于忽略文件
设置|grepprg|为rg
>
	set grepprg=rg\ --vimgrep
<

查找文件 ~
>
	:find **/*.py
<
按Tab键自动补全

`find . -name 'scheduler*.py'`
`find -type f`  查找文件
`find -type d`  查找目录

使用fd
可以添加.ignore文件, 用于忽略文件

其它 ~
`tldr find`
`tldr grep`

|tagsystem|

-------------------------------------------------------------------------------
|ctags|

创建tags
ctags -R .

:ta main
CTRL-]

其它 :h tags

-------------------------------------------------------------------------------
|gtags|

:set csprg=gtags-cscope

创建gtags数据库
gtags

vim连接数据库
:cs add GTAGS

使用其它前端解析(注意.globalrc配置文件, 可以从/etc/gtags.conf, /etc/gtags/gtags.conf复制)
pip install pygments
GTAGSLABEL=pygments gtags
GTAGSLABEL=native-pygments gtags

查找文件
:cs f f hello
查找符号
:cs f s main

也可以用`:cstag <ident>`命令查找符号

-------------------------------------------------------------------------------
|coc.nvim|

cmake可以在不执行编译的情况下生成compile_commands.json文件

-------------------------------------------------------------------------------
补全
See: complete.md
