#[url "https://gitclone.com/github.com/"]
#	insteadOf = https://github.com/
[user]
	email = jiangyinzuo@foxmail.com
	name = jiangyinzuo
[core]
	editor = vim
	quotepath = false
[diff]
	tool = vimdiff
[difftool]
	prompt = false

#################################################
# See: https://github.com/samoshkin/vim-mergetool
[merge]
	# tool = vimdiff
	tool = vim_mergetool
	conflictstyle = diff3
[mergetool]
	keepBackup = false
[mergetool "vim_mergetool"]
	cmd = USE_VIM_MERGETOOL=1 vim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
	# When trustExitCode = true, checks exit code of merge tool process.
	# When trustExitCode = false, checks if MERGED file was modified.
	trustExitCode = true
	prompt = false
#################################################

[includeIf "gitdir:/mnt/d/doc2/group-meeting/"]
	path = ~/.gitconfig-ict
[includeIf "gitdir:/mnt/d/wkspace/blade-project/"]
	path = ~/.gitconfig-ict

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[safe]
	directory = *

# use utf-8
# https://m.php.cn/tool/git/506129.html
# git config --global i18n.commitencoding utf-8
# git config --global i18n.logoutputencoding utf-8
# git config --global core.quotepath false
# git config --global gui.encoding utf-8
# git config --global utf8.auto false
[i18n]
	logoutputencoding = utf-8
[gui]
	encoding = utf-8
[utf8]
	auto = false

[alias]
# https://how-to.dev/how-to-display-git-branches-as-a-tree-in-cli
# Config command: git config --global alias.tree "log --oneline --graph --decorate --all"
#
# --oneline = show each commit as a single line
# --graph = show ASCII graph of branch and merge history
# --decorate = show branch and tag names on graph
# --all = show all commits (by default only shows commits reachable from HEAD)
# --pretty=format: = use custom format
#
# https://stackoverflow.com/questions/1441010/the-shortest-possible-output-from-git-log-containing-author-and-date/1441062#1441062
# %h = abbreviated commit hash
# %an = author name
# %ad = author date (format respects --date= option)
# %d = ref names, like the --decorate option of git-log(1)
# %s = subject
# %C(auto,yellow) = yellow text
# %C(auto,green) = green text
# %C(auto,blue) = blue text
# %C(reset) = reset color
# %x09 = tab
# --date=short = show date in short format
#
# Usage:
# 	git tree    # all commits
# 	git tree -2 # last 2 commits
	tree = log --graph --decorate --all --pretty=format:'%C(auto,yellow)%h %C(auto,green)%an %C(auto,blue)%ad%C(auto)%d%n%x09%C(reset)%s' --date=format-local:'%Y-%m-%d %H:%M:%S'
	# git status, but exclude some files
	status-ex = "!f() { git ls-files | grep -v \"^$1/\" | xargs git status; }; f"
	rm-file-in-history = !git-rm-file-in-history
